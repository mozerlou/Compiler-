Token		Classification
CLASS		$CLASS
LargestCommonDenominator		var
{		LB
CONST		$CONST
M		var
=		assign
7		NumLit
,		Comma
N		var
=		assign
85		NumLit
;		semi
VAR		$VAR
X		var
,		Comma
Y		var
,		Comma
Z		var
,		Comma
Q		var
,		Comma
R		var
;		semi
PROCEDURE		$PROCEDURE
Multiply		var
(		LP
)		RP
{		LB
VAR		$VAR
A		var
,		Comma
B		var
;		semi
A		var
=		assign
X		var
;		semi
B		var
=		assign
Y		var
;		semi
Z		var
=		assign
0		NumLit
;		semi
WHILE		$WHILE
B		var
>		relop
0		NumLit
DO		$DO
{		LB
IF		$IF
ODD		$ODD
B		var
THEN		$CONST
Z		var
=		assign
Z		var
+		addop
A		var
;		semi
A		var
=		assign
2		NumLit
*		mop
A		var
;		semi
B		var
=		assign
B		var
/		dop
2		NumLit
}		RB
}		RB
PROCEDURE		$PROCEDURE
Divide		var
(		LP
)		RP
{		LB
VAR		$VAR
W		var
;		semi
R		var
=		assign
X		var
;		semi
Q		var
=		assign
0		NumLit
;		semi
W		var
=		assign
Y		var
;		semi
WHILE		$WHILE
W		var
<=		relop
=		assign
R		var
DO		$DO
W		var
=		assign
2		NumLit
*		mop
W		var
;		semi
WHILE		$WHILE
W		var
>		relop
Y		var
DO		$DO
{		LB
Q		var
=		assign
2		NumLit
*		mop
Q		var
;		semi
W		var
=		assign
W		var
/		dop
2		NumLit
;		semi
IF		$IF
W		var
<=		relop
=		assign
R		var
THEN		$CONST
{		LB
R		var
=		assign
R		var
error occured here
W		var
;		semi
Q		var
=		assign
Q		var
+		addop
1		NumLit
}		RB
}		RB
}		RB
PROCEDURE		$PROCEDURE
GCD		var
(		LP
)		RP
{		LB
VAR		$VAR
F		var
,		Comma
G		var
;		semi
F		var
=		assign
X		var
;		semi
G		var
=		assign
Y		var
;		semi
WHILE		$WHILE
F		var
!=		relop
G		var
DO		$DO
{		LB
IF		$IF
F		var
<		relop
G		var
THEN		$CONST
G		var
=		assign
G		var
error occured here
F		var
;		semi
IF		$IF
G		var
<		relop
F		var
THEN		$CONST
F		var
=		assign
F		var
error occured here
G		var
;		semi
}		RB
Z		var
=		assign
F		var
}		RB
/		dop
X		var
=		assign
M		var
;		semi
Y		var
=		assign
N		var
CALL		$CALL
Multiply		var
(		LP
)		RP
;		semi
X		var
=		assign
25		NumLit
;		semi
Y		var
=		assign
3		NumLit
;		semi
CALL		$CALL
Divide		var
(		LP
)		RP
;		semi
X		var
=		assign
84		NumLit
;		semi
Y		var
=		assign
36		NumLit
;		semi
CALL		$CALL
GCD		var
(		LP
)		RP
}		RB
